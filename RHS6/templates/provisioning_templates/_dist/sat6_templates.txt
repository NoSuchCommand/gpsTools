[root@satellite ~]# su - postgres -c 'PAGER="less -FRXS" psql'
psql (9.2.23)
Type "help" for help.

postgres=# \c foreman
foreman=# select id,name from template_kinds;
 id |   name    
----+-----------
...
  5 | provision
...
(11 rows)

foreman=# select id,name from templates where template_kind_id = 5;
 id |                name                
----+------------------------------------
...
 73 | Satellite Kickstart Default
...
(11 rows)

foreman=# \o /tmp/templates.txt
foreman=# select name,template from templates where id = 73 or snippet is true;


###############################################################################
###############################################################################
########>                           RESULT                          <##########
###############################################################################
###############################################################################

name     | alterator_pkglist
template | <%#
         | kind: snippet
         | name: alterator_pkglist
         | -%>
         | <%# 
         |   This template will not function with Safemode set to true. 
         | %>
         | <%= Net::HTTP.get(URI.parse("#{@mediapath}/Metadata/pkg-groups.tar")) %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | chef_client
template | <%#
         | kind: snippet
         | name: chef_client
         | description: this is a single entry point for chef-client bootstrapping, it selects
         |     a bootstrapping strategy based on host parameter named "chef_bootstrap_template"
         |     note that it can be set per hostgroup, os, domain etc.
         |     if there's no strategy set, omnibus is used by default
         | %>
         | echo "Bootstraping chef"
         | <%= snippet_if_exists(@host.params['chef_bootstrap_template'] || 'chef-client omnibus bootstrap') %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | coreos_cloudconfig
template | #cloud-config
         | <%#
         | kind: snippet
         | name: coreos_cloudconfig
         | %>
         |       coreos:
         |         etcd2:
         | <% if @host.params['etcd_discovery_url'] -%>
         |           discovery: <%= @host.params['etcd_discovery_url'] %>
         | <% end -%>
         |           advertise-client-urls: http://<%= @host.ip %>:2379
         |           initial-advertise-peer-urls: http://<%= @host.ip %>:2380
         |           listen-client-urls: http://0.0.0.0:2379
         |           listen-peer-urls: http://0.0.0.0:2380
         |         units:
         |           - name: etcd2.service
         |             command: start
         |           - name: fleet.service
         |             command: start
         | <% if @host.param_true?('expose_docker_socket') -%>
         |           - name: docker-tcp.socket
         |             command: start
         |             enable: yes
         |             content: |
         |               [Unit]
         |               Description=Docker Socket for the API
         | 
         |               [Socket]
         |               ListenStream=2375
         |               BindIPv6Only=both
         |               Service=docker.service
         | 
         |               [Install]
         |               WantedBy=sockets.target
         |           - name: enable-docker-tcp.service
         |             command: start
         |             content: |
         |               [Unit]
         |               Description=Enable the Docker Socket for the API
         | 
         |               [Service]
         |               Type=oneshot
         |               ExecStart=/usr/bin/systemctl enable docker-tcp.socket
         | <% end -%>
         | <% if @host.subnet.respond_to?(:dhcp_boot_mode?) -%>
         | <% dhcp = @host.subnet.dhcp_boot_mode? && !@static -%>
         | <% else -%>
         | <% dhcp = !@static -%>
         | <% end -%>
         | <% unless dhcp -%>
         |           - name: systemd-networkd.service
         |             command: stop
         |           - name: static.network
         |             command: start
         |             content: |
         |               [Match]
         |               MACAddress=<%= @host.mac %>
         |               [Network]
         |               Gateway=<%= @host.subnet.gateway %>
         |               Address=<%= @host.ip %>/<%= @host.subnet.cidr %>
         |               DNS=<%= @host.subnet.dns_primary %>
         |               DNS=<%= @host.subnet.dns_secondary %>
         |           - name: down-interfaces.service
         |             command: start
         |             content: |
         |               [Service]
         |               Type=oneshot
         |               ExecStart=/usr/bin/bash -c 'for i in $(/usr/bin/ls /sys/class/net/); do [ $i == "lo" ] || (/usr/bin/ip link set $i down; /usr/bin/ip addr flush dev $i); done'
         |           - name: systemd-networkd.service
         |             command: restart
         | <% end -%>
         | <% if @host.params['ssh_authorized_keys'] -%>
         |       ssh_authorized_keys:
         |   <% @host.params['ssh_authorized_keys'].split(',').map(&:strip).each do |ssh_key| -%>
         |       - "<%= ssh_key %>"
         |   <% end -%>
         | <% else -%>
         |       users:
         |         - name: core
         |           passwd: <%= root_pass %>
         | <% end -%>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | epel
template | <%#
         | kind: snippet
         | name: epel
         | %>
         | 
         | su -c 'rpm -Uvh <%= @host.os.medium_uri(@host, "http://dl.fedoraproject.org/pub/epel/epel-release-latest-#{@host.operatingsystem.major}.noarch.rpm") %>'
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | fix_hosts
template | <%#
         | kind: snippet
         | name: fix_hosts
         | %>
         | echo "<%= @host.shortname %>" > /etc/hostname
         | hostname <%= @host.shortname %>
         | cat > /etc/hosts << EOF
         | <%# simple snippet to generate /etc/hosts when provisioning image based systems -%>
         | 127.0.0.1   <%= @host %> <%= @host.shortname %> localhost localhost.localdomain
         | ::1     ip6-localhost ip6-loopback
         | fe00::0 ip6-localnet
         | ff00::0 ip6-mcastprefix
         | ff02::1 ip6-allnodes
         | ff02::2 ip6-allrouters
         | EOF
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | freeipa_register
template | <%#
         | kind: snippet
         | name: freeipa_register
         | %>
         | # FreeIPA Registration Snippet
         | #
         | # Optional parameters:
         | #
         | #   freeipa_server              IPA server
         | #
         | #   freeipa_sudo                Enable sudoers
         | #                               Default: true
         | #
         | #   freeipa_ssh                 Enable ssh integration
         | #                               Default: true
         | #
         | #   freeipa_automount           Enable automounter
         | #                               Default: false
         | #
         | #   freeipa_automount_location  Location for automounts
         | #
         | #   freeipa_mkhomedir           Enable automatically making home directories
         | #                               Default: true
         | #
         | #   freeipa_opts                Additional options to pass directly to installer
         | #
         | <% if @host.operatingsystem.family == 'Redhat' -%>
         |   <% if @host.operatingsystem.name == 'Fedora' -%>
         |     freeipa_client=freeipa-client
         |   <% else -%>
         |     freeipa_client=ipa-client
         |   <% end -%>
         | <% else -%>
         |   freeipa_client=freeipa-client
         | <% end -%>
         | 
         | <%= @host.operatingsystem.family == 'Redhat' ? 'yum install -y libsss_sudo' : 'apt-get install -y libsss-sudo' %> $freeipa_client
         | 
         | ##
         | ## IPA Client Installation
         | ##
         | <% if @host.params['freeipa_server'] -%>
         | <% domain = @host.params['freeipa_domain'] || @host.realm.name.downcase -%>
         | 
         | freeipa_server="--server <%= @host.params['freeipa_server'] %> --domain <%=domain %>"
         | <% end -%>
         | 
         | <% unless @host.param_false? 'freeipa_mkhomedir' %>
         | freeipa_mkhomedir="--mkhomedir"
         | <% end -%>
         | 
         | <% if @host.param_false? 'freeipa_ssh' %>
         | freeipa_ssh="--no-ssh"
         | <% end -%>
         | 
         | <% if @host.params['freeipa_opts'] -%>
         | freeipa_opts="<%= @host.params['freeipa_opts'] %>"
         | <% end -%>
         | 
         | # One-time password will be requested at install time. Otherwise, $HOST[OTP] is used as a placeholder value.
         | /usr/sbin/ipa-client-install -w '<%= @host.otp || "$HOST[OTP]" %>' --realm=<%= @host.realm %> -U $freeipa_mkhomedir $freeipa_opts $freeipa_server $freeipa_ssh
         | 
         | ##
         | ## Automounter
         | ##
         | 
         | <% if @host.params['freeipa_automount_location'] -%>
         | automount_location="--location <%= @host.params['freeipa_automount_location'] %>"
         | <% end -%>
         | 
         | <% if @host.param_true? 'freeipa_automount' -%>
         | if [ -f /usr/sbin/ipa-client-automount ]
         | then
         |   /usr/sbin/ipa-client-automount $freeipa_server $automount_location --unattended
         | fi
         | <% end -%>
         | 
         | ##
         | ## Sudoers
         | ##
         | 
         | <% unless @host.param_false? 'freeipa_enable_sudo' %>
         | 
         | freeipa_client_version=$(ipa-client-install --version)
         | freeipa_client_version_major=$(echo $freeipa_client_version | cut -f1 -d.)
         | freeipa_client_version_minor=$(echo $freeipa_client_version | cut -f2 -d.)
         | freeipa_realm=$(grep default_realm /etc/krb5.conf | cut -d"=" -f2 | tr -d ' ')
         | freeipa_domain=$(grep -A 2 domain_realm /etc/krb5.conf | tail -n1 | awk '{print $1}')
         | freeipa_dn=$(for word in $(echo $freeipa_domain | sed 's/\./ /g'); do echo -n dc=$word,; done)
         | sssd_version=$(sssd --version)
         | sssd_major=$(echo $sssd_version | cut -f1 -d.)
         | sssd_minor=$(echo $sssd_version | cut -f2 -d.)
         | LDAP_CONFIG=$(mktemp)
         | 
         | # >=ipa-client-4.1.0 automatically configures sssd for sudo
         | # =<ipa-client-3 requires manual configuration which this snippet takes care of
         | 
         | if [ $freeipa_client_version_major -lt 4 ]
         | then
         |   # Modify sssd.conf
         |   sed -i -e "s/services = .*/\0, sudo/" /etc/sssd/sssd.conf
         | 
         |   # Modify sssd.conf for sssd <1.11 (RHEL <6.6)
         |   if [ $sssd_minor -lt 11 ] || [ $sssd_major -lt 1 ]
         |   then
         |     <% if @host.params['freeipa_server'] -%>
         |     ldap_uri=", ldap://<%= @host.params['freeipa_server'] %>"
         |     krb5_server=<%= @host.params['freeipa_server'] %>
         |     <% else -%>
         |     krb5_server="_srv_"
         |     <% end -%>
         | 
         | cat <<EOF > $LDAP_CONFIG
         | sudo_provider = ldap
         | ldap_uri = _srv_ $ldap_uri
         | ldap_sudo_search_base = ou=SUDOers,${freeipa_dn%?}
         | ldap_sasl_mech = GSSAPI
         | ldap_sasl_authid = host/$HOSTNAME
         | ldap_sasl_realm = $freeipa_realm
         | krb5_server = $krb5_server
         | EOF
         |   sed -i -e "/\[domain\/.*\]/ r $LDAP_CONFIG" /etc/sssd/sssd.conf
         |   fi
         | 
         |   # Modify nsswitch.conf
         |   grep -q sudoers /etc/nsswitch.conf
         |   if [[ $? -eq 0 ]];
         |   then
         |     sed -i -e "s/^sudoers.*/sudoers:    files sss/" /etc/nsswitch.conf
         |   else
         |     echo "sudoers:    files sss" >> /etc/nsswitch.conf
         |   fi
         | 
         |   # Configure nisdomain
         |   <% if @host.operatingsystem.family == 'Redhat' -%>
         |     authconfig --nisdomain ${freeipa_domain} --update
         |     chkconfig sssd on
         |     
         |     if [[ $(rpm -qa systemd | wc -l) -gt 0 ]];
         |     then
         |       domain_service=/usr/lib/systemd/system/*-domainname.service
         |       
         |       # Workaround for BZ1071969 on RHEL 7.0
         |       grep -q "DefaultDependencies=no" $domain_service
         |       if [[ $? -ne 0 ]]
         |       then
         |         sed -i -e "s/\[Unit\]/\[Unit\]\nDefaultDependencies=no/" $domain_service
         |       fi
         | 
         |       systemctl start $(basename $domain_service)
         |       systemctl enable $(basename $domain_service)
         |     fi
         |   <% else -%>
         |   # OS is not RedHat
         |   sed -i -e '/^exit /d' /etc/rc.local
         |   echo "nisdomainname ${freeipa_domain}" >> /etc/rc.local
         |   echo "exit 0" >> /etc/rc.local
         |   nisdomainname ${freeipa_domain}  
         |   <% end -%>
         | fi
         | 
         | <% end -%>
         | 
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | http_proxy
template | <% if (proxy = @host.params["http_proxy"]) -%>
         | http_proxy=<%= proxy %>
         | export http_proxy
         | https_proxy=<%= proxy %>
         | export https_proxy
         | no_proxy=localhost,127.0.0.0/8,*.local,*.<%= @host.domain.name -%>,puppet
         | export no_proxy
         | <% end -%>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | kickstart_networking_setup
template | <%#
         | kind: snippet
         | name: kickstart_networking_setup
         | description: this will configure your host networking, it configures your primary interface as well
         |     as other configures NICs. It supports physical, VLAN and Alias interfaces. It's intended to be
         |     called from %post in your kickstart template. Note that this snippet can be used with Foreman 1.7
         |     and later
         | %>
         | <% subnet = @host.subnet -%>
         | <% dhcp = subnet.dhcp_boot_mode? -%>
         | 
         | <% if @host.respond_to?(:has_primary_interface?) %>
         | <%# Foreman 1.7 - primary interface contained in @host %>
         | # primary interface
         | real=`ip -o link | grep <%= @host.mac -%> | awk '{print $2;}' | sed s/://`
         | <% if @host.has_primary_interface? %>
         | cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$real
         | BOOTPROTO="<%= dhcp ? 'dhcp' : 'none' -%>"
         | <% unless dhcp -%>
         | IPADDR="<%= @host.ip -%>"
         | NETMASK="<%= subnet.mask -%>"
         | <% if !subnet.gateway.nil? && !subnet.gateway.empty? -%>
         | GATEWAY="<%= subnet.gateway %>"
         | <% end -%>
         | <% end -%>
         | DEVICE=$real
         | HWADDR="<%= @host.mac -%>"
         | ONBOOT=yes
         | EOF
         | <% end -%>
         | <% end -%>
         | 
         | <% bonded_interfaces = [] %>
         | <% bonds = @host.bond_interfaces %>
         | <% bonds.each do |bond| %>
         | <% subnet = bond.subnet -%>
         | <% dhcp = subnet.nil? ? false : subnet.dhcp_boot_mode? -%>
         | # <%= bond.identifier %> interface
         | real="<%= bond.identifier -%>"
         | cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$real
         | BOOTPROTO="<%= dhcp ? 'dhcp' : 'none' -%>"
         | <% unless dhcp || subnet.nil? -%>
         | IPADDR="<%= bond.ip -%>"
         | NETMASK="<%= subnet.mask -%>"
         | <% if !subnet.gateway.nil? && !subnet.gateway.empty? -%>
         | GATEWAY="<%= subnet.gateway %>"
         | <% end -%>
         | <% end -%>
         | DEVICE=$real
         | ONBOOT=yes
         | PEERDNS=no
         | PEERROUTES=no
         | DEFROUTE="<%= bond.primary ? 'yes' : 'no' -%>"
         | TYPE=Bond
         | BONDING_OPTS="<%= bond.bond_options -%> mode=<%= bond.mode -%>"
         | BONDING_MASTER=yes
         | NM_CONTROLLED=no
         | EOF
         | 
         | <% @host.interfaces_with_identifier(bond.attached_devices_identifiers).each do |interface| -%>
         | <% next if !interface.managed? -%>
         | 
         | <% subnet = interface.subnet -%>
         | <% virtual = interface.virtual? -%>
         | <% vlan = virtual && (subnet.has_vlanid? || interface.vlanid.present?) -%>
         | <% alias_type = virtual && !subnet.nil? && !subnet.has_vlanid? && interface.identifier.include?(':') -%>
         | <% dhcp = !subnet.nil? && subnet.dhcp_boot_mode? -%>
         | 
         | # <%= interface.identifier %> interface
         | real=`ip -o link | grep <%= interface.inheriting_mac -%> | awk '{print $2;}' | sed s/:$//`
         | <% if virtual -%>
         | real=`echo <%= interface.identifier -%> | sed s/<%= interface.attached_to -%>/$real/`
         | <% end -%>
         | 
         | # ifcfg files are ignored by NM if their name contains colons so we convert colons to underscore
         | <% if alias_type -%>
         | sanitized_real=`echo $real | sed s/:/_/`
         | <% else -%>
         | sanitized_real=$real
         | <% end -%>
         | 
         | cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$sanitized_real
         | BOOTPROTO="none"
         | DEVICE=$real
         | <% unless virtual -%>
         | HWADDR="<%= interface.mac -%>"
         | <% end -%>
         | ONBOOT=yes
         | PEERDNS=no
         | PEERROUTES=no
         | <% if vlan -%>
         | VLAN=yes
         | <% elsif alias_type -%>
         | TYPE=Alias
         | <% end -%>
         | NM_CONTROLLED=no
         | MASTER=<%= bond.identifier %>
         | SLAVE=yes
         | EOF
         | 
         | <% bonded_interfaces.push(interface.identifier) -%>
         | <% end %>
         | <% end %>
         | 
         | <% @host.managed_interfaces.each do |interface| %>
         | <% next if !interface.managed? || interface.subnet.nil? -%>
         | <% next if bonded_interfaces.include?(interface.identifier) -%>
         | 
         | <% subnet = interface.subnet -%>
         | <% virtual = interface.virtual? -%>
         | <% vlan = virtual && (subnet.has_vlanid? || interface.vlanid.present?) -%>
         | <% alias_type = virtual && !subnet.has_vlanid? && interface.identifier.include?(':') -%>
         | <% dhcp = subnet.dhcp_boot_mode? -%>
         | 
         | # <%= interface.identifier %> interface
         | real=`ip -o link | grep <%= interface.inheriting_mac -%> | awk '{print $2;}' | sed s/:$//`
         | <% if virtual -%>
         |   real=`echo <%= interface.identifier -%> | sed s/<%= interface.attached_to -%>/$real/`
         | <% end -%>
         | 
         | # ifcfg files are ignored by NM if their name contains colons so we convert colons to underscore
         | <% if alias_type -%>
         | sanitized_real=`echo $real | sed s/:/_/`
         | <% else -%>
         | sanitized_real=$real
         | <% end -%>
         | 
         | cat << EOF > /etc/sysconfig/network-scripts/ifcfg-$sanitized_real
         | BOOTPROTO="<%= dhcp ? 'dhcp' : 'none' -%>"
         | <% unless dhcp -%>
         | IPADDR="<%= interface.ip -%>"
         | NETMASK="<%= subnet.mask -%>"
         | <% if !subnet.gateway.nil? && !subnet.gateway.empty? -%>
         | GATEWAY="<%= subnet.gateway %>"
         | <% end -%>
         | <% end -%>
         | DEVICE=$real
         | <% unless virtual -%>
         | HWADDR="<%= interface.mac -%>"
         | <% end -%>
         | ONBOOT=yes
         | <% if interface.respond_to?(:primary) && interface.primary -%>
         | PEERDNS=yes
         | PEERROUTES=yes
         | <% if !dhcp && !subnet.dns_primary.nil? && !subnet.dns_primary.empty? -%>
         | DNS1=<%= subnet.dns_primary %>
         | <% if !subnet.dns_secondary.nil? && !subnet.dns_secondary.empty? -%>
         | DNS2=<%= subnet.dns_secondary %>
         | <% end -%>
         | <% end -%>
         | <% else -%>
         | PEERDNS=no
         | PEERROUTES=no
         | <% end -%>
         | <% if vlan -%>
         | VLAN=yes
         | <% elsif alias_type -%>
         | TYPE=Alias
         | <% end -%>
         | EOF
         | 
         | <% end %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | preseed_networking_setup
template | <%#
         | kind: snippet
         | name: preseed_networking_setup
         | description: this will configure your host networking, it configures your primary interface as well
         |     as other configures NICs. It supports physical, VLAN and Alias interfaces. It's intended to be
         |     called in your preseed finish template.
         | %>
         | <% subnet = @host.subnet -%>
         | <% dhcp = subnet.dhcp_boot_mode? -%>
         | 
         | real=`ip -o link | grep <%= @host.mac -%> | awk '{print $2;}' | sed s/://`
         | cat << EOF > /etc/network/interfaces
         | #loopback
         | auto lo
         | iface lo inet loopback
         | 
         | #<%= @host.primary_interface.identifier %>
         | auto $real
         | allow-hotplug $real
         | iface $real inet <%= dhcp ? 'dhcp' : 'static' %>
         | <% unless dhcp -%>
         |     address <%= @host.ip %>
         |     gateway <%= @host.subnet.gateway  %>
         |     netmask <%= @host.subnet.mask  %>
         |     dns-nameservers <%= @host.subnet.dns_primary %> <%= @host.subnet.dns_secondary %>
         |     dns-search <%= @host.domain %>
         | <% end %>
         | EOF
         | 
         | <% @host.managed_interfaces.each do |interface| %>
         | <% next if !interface.managed? || interface.subnet.nil? || interface.primary -%>
         | <% subnet = interface.subnet -%>
         | <% virtual = interface.virtual? -%>
         | <% dhcp = subnet.nil? ? false : subnet.dhcp_boot_mode? -%>
         | real=`ip -o link | grep <%= interface.mac -%> | awk '{print $2;}' | sed s/:$//`
         | <% if virtual -%>
         | real=`echo <%= interface.identifier -%> | sed s/<%= interface.physical_device -%>/$real/`
         | <% end -%>
         | 
         | cat << EOF >> /etc/network/interfaces
         | #<%= interface.identifier %>
         | auto $real
         | iface $real inet <%= dhcp ? 'dhcp' : 'static' %>
         | <% unless dhcp -%>
         |     address <%= interface.ip %>
         |     netmask <%= subnet.mask %>
         | <% end %>
         | EOF
         | <% end -%>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | puppet.conf
template | <%#
         | kind: snippet
         | name: puppet.conf
         | %>
         | [main]
         | <% if @host.operatingsystem.name == 'FreeBSD' -%>
         | vardir = /var/puppet
         | logdir = \$vardir/log
         | <% else -%>
         | vardir = /var/lib/puppet
         | logdir = /var/log/puppet
         | <% end -%>
         | rundir = /var/run/puppet
         | ssldir = \$vardir/ssl
         | 
         | [agent]
         | pluginsync      = true
         | report          = true
         | ignoreschedules = true
         | daemon          = false
         | <%- if @host.puppet_ca_server.strip -%>
         | ca_server       = <%= @host.puppet_ca_server %>
         | <%- end -%>
         | certname        = <%= @host.certname %>
         | environment     = <%= @host.environment %>
         | server          = <%= @host.puppetmaster %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | redhat_register
template | <%#
         | kind: snippet
         | name: redhat_register
         | %>
         | # Red Hat Registration Snippet
         | #
         | # Set these parameters if you're using rhnreg_ks:
         | #
         | #   spacewalk_type = 'site'     (local Spacewalk/Satellite server)
         | #                  = 'hosted'   (RHN hosted)
         | #   spacewalk_host = <hostname> (hostname of Spacewalk server, optional for
         | #                                RHN hosted)
         | #
         | # Set these parameters if you're using subscription-manager:
         | #
         | #   subscription_manager = 'true' (you're going to use subscription-manager)
         | #
         | #   subscription_manager_username = <username> (if using hosted RHN)
         | #
         | #   subscription_manager_password = <password> (if using hosted RHN)
         | #
         | #   subscription_manager_certpkg_url = <url> (url of cert package when using
         | #                                             when using foreman with katello
         | #                                             for example:
         | #                                             http://fqdn/pub
         | #                                             /katello-ca-consumer-latest.noarch.rpm)
         | #
         | #   subscription_manager_host = <hostname> (deprecated for
         | #                                           subscription_manager_certpkg_url:
         | #                                           hostname of SAM/Katello
         | #                                           installation, if using SAM.
         | #                                           hostname is used to determine the
         | #                                           consumer cert url.)
         | #
         | #   subscription_manager_org = <org name> (organization name, if using
         | #                                          SAM/Katello)
         | #
         | #   subscription_manager_repos = <repos> (comma separated list of repos (like
         | #                                         rhel-6-server-optional-rpms) to
         | #                                         enable after registration)
         | #
         | #   subscription_manager_pool = <pool> (specific pool to be used for
         | #                                       registration)
         | #
         | #   http-proxy = <host> (proxy hostname to be used for registration)
         | #
         | #   http-proxy-port = <port> (proxy port to be used for registration)
         | #
         | #   http-proxy-user = <user> (proxy user to be used for registration)
         | #
         | #   http-proxy-password = <password> (proxy password to be
         | #                                           used for registration)
         | #
         | #
         | # Set this parameter regardless of which registration method you're using:
         | #
         | #   activation_key = <key>      (activation key string, not needed if using
         | #                                subscription-manager with hosted RHN)
         | #
         | 
         | <% unless @host.params['subscription_manager'] %>
         |   <% type = @host.params['spacewalk_type'] || 'hosted' %>
         | 
         |   <% if @host.params['activation_key'] %>
         |     # Discovered Activation Key <%= @host.params['activation_key'] %>
         |     rhn_activation_key="<%= @host.params['activation_key'] -%>"
         | 
         |     <% if type == 'site' -%>
         |     satellite_hostname="<%= @host.params['spacewalk_host'] -%>"
         |     rhn_cert_file="RHN-ORG-TRUSTED-SSL-CERT"
         |     <% else -%>
         |     satellite_hostname="<%= @host.params['spacewalk_host'] || 'xmlrpc.rhn.redhat.com' -%>"
         |     rhn_cert_file="RHNS-CA-CERT"
         |     <% end -%>
         | 
         |     echo "Registering to RHN Satellite at [$satellite_hostname]"
         |     echo "Using Registration Key [$rhn_activation_key]"
         | 
         |     <% if type == 'site' -%>
         |     # Obtain our RHN Satellite Certificate
         |     echo "Obtaining RHN SSL certificate"
         |     curl -o /usr/share/rhn/$rhn_cert_file -k https://$satellite_hostname/pub/$rhn_cert_file
         |     <% if @host.operatingsystem.name == 'SLES' -%>
         |     # if SLES then add CA Cert to CA Certs for curl
         |     cp /usr/share/rhn/$rhn_cert_file /etc/ssl/certs/
         |     ln -s /etc/ssl/certs/$rhn_cert_file /etc/ssl/certs/`openssl x509 -hash -noout -in /etc/ssl/certs/$rhn_cert_file`.0
         |     <% end -%>
         |     <% end -%>
         | 
         |     # Update our up2date configuration file
         |     echo "Updating SSL CA Certificate to /usr/share/rhn/$rhn_cert_file"
         |     sed -i -e "s|^sslCACert=.*$|sslCACert=/usr/share/rhn/$rhn_cert_file|" /etc/sysconfig/rhn/up2date
         | 
         |     # Update our Satellite Hostname
         |     echo "Updating Satellite Hostname to [$satellite_hostname]"
         |     sed -i -e "s|^serverURL=.*$|serverURL=https://$satellite_hostname/XMLRPC|" /etc/sysconfig/rhn/up2date
         |     sed -i -e "s|^noSSLServerURL=.*$|noSSLServerURL=https://$satellite_hostname/XMLRPC|" /etc/sysconfig/rhn/up2date
         | 
         |     # Restart messagebus/HAL to try and prevent hardware detection errors in rhnreg_ks
         |     echo "Restarting services..."
         |     <% if @host.operatingsystem.name == 'SLES' -%>
         |     <% if @host.operatingsystem.major.to_i < 12 -%>
         |     service haldaemon restart
         |     <% end -%>
         |     <% else -%>
         |     service messagebus restart
         |     service hald restart
         |     <% end -%>
         | 
         |     # Now, perform our registration
         |     #  (might get hardware errors here, due to dbus/messagebus lameness. These are safe to ignore.)
         |     echo -n "Performing RHN Registration... "
         |     rhnreg_ks --activationkey=$rhn_activation_key
         |     echo "done."
         | 
         |     # Check we registered
         |     echo -n "Checking System Registration... "
         |     if ! rhn_check; then
         |         echo "FAILED"
         |         echo " >> RHN Registration FAILED. Please Investigate. <<"
         |     else
         |         echo "registration successful."
         |     fi
         |   <% else %>
         |     # Not registering - host.params['activation_key'] not found.
         |   <% end %>
         | <% else %>
         |   echo "Starting the subscription-manager registration process"
         |   yum -t -y -e 0 install subscription-manager <%= @host.operatingsystem.major.to_i >= 6 ? 'yum-config-manager' : '' %>
         |   <% if @host.operatingsystem.major.to_i >= 6  %>
         |     <% ( enabled_repos = "yum-config-manager --enable #{@host.params['subscription_manager_repos'].gsub(',', ' ')}") if @host.params['subscription_manager_repos'] %>
         |   <% else %>
         |     <% ( enabled_repos = "subscription-manager repos --enable #{@host.params['subscription_manager_repos'].gsub(',', ' --enable')}") if @host.params['subscription_manager_repos'] %>
         |   <% end %>
         |   <% if @host.params['http-proxy'] %>
         |     subscription-manager config --server.proxy_hostname="<%= @host.params['http-proxy'] %>"
         |     <% if @host.params['http-proxy-user'] %>
         |       subscription-manager config --server.proxy_user="<%= @host.params['http-proxy-user'] %>"
         |     <% end %>
         |     <% if @host.params['http-proxy-password'] %>
         |       subscription-manager config --server.proxy_password="<%= @host.params['http-proxy-password'] %>"
         |     <% end %>
         |     <% if @host.params['http-proxy-port'] %>
         |       subscription-manager config --server.proxy_port="<%= @host.params['http-proxy-port'] %>"
         |     <% end %>
         |   <% end %>
         |   <% if @host.params['subscription_manager_username'] && @host.params['subscription_manager_password'] %>
         |     <% if @host.params['subscription_manager_pool'] %>
         |       subscription-manager register --username="<%= @host.params['subscription_manager_username'] %>" --password="<%= @host.params['subscription_manager_password'] %>"
         |       subscription-manager attach --pool="<%= @host.params['subscription_manager_pool'] %>"
         |     <% else %>
         |       subscription-manager register --username="<%= @host.params['subscription_manager_username'] %>" --password="<%= @host.params['subscription_manager_password'] %>" --auto-attach
         |     <% end %>
         |     # workaround for RHEL 6.4 bug https://bugzilla.redhat.com/show_bug.cgi?id=1008016
         |     subscription-manager repos --list > /dev/null
         |     <%= enabled_repos if enabled_repos %>
         |   <% elsif @host.params['activation_key'] %>
         |     <% if @host.params['subscription_manager_certpkg_url'] %>
         |       rpm -Uvh <%= @host.params['subscription_manager_certpkg_url'] %>
         |     <% elsif @host.params['subscription_manager_host'] %>
         |       rpm -Uvh <%= @host.params['subscription_manager_host'] %>/pub/candlepin-cert-consumer-latest.noarch.rpm
         |     <% end %>
         |     subscription-manager register --org="<%= @host.params['subscription_manager_org'] %>" --activationkey="<%= @host.params['activation_key'] %>"
         |     # workaround for RHEL 6.4 bug https://bugzilla.redhat.com/show_bug.cgi?id=1008016
         |     subscription-manager repos --list > /dev/null
         |     <%= enabled_repos if enabled_repos %>
         |   <% else %>
         |     # Not registering host.params['activation_key'] not found.
         |   <% end %>
         | <% end %>
         | # End Red Hat Registration Snippet
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | remote_execution_ssh_keys
template | <%#
         |   kind: snippet
         |   name: remote_execution_ssh_keys
         | %>
         | # SSH keys setup snippet
         | #
         | # Parameters:
         | #
         | # remote_execution_ssh_keys: public keys to be put in ~/.ssh/authorized_keys
         | #
         | # remote_execution_ssh_user: user for which remote_execution_ssh_keys will be
         | #                            authorized
         | #
         | # This template sets up SSH keys in any host so that as long as your public
         | # SSH key is in remote_execution_ssh_keys, you can SSH into a host.
         | 
         | # A personal recomendation: create a global parameter remote_execution_ssh_keys
         | # and put your keys there, so that you can access any newly provisioned host
         | # without having to set up the parameter on every host or host group.
         | 
         | 
         | <% if !@host.params['remote_execution_ssh_keys'].blank? %>
         | <% ssh_user = @host.params['remote_execution_ssh_user'] || 'root' %>
         | <% ssh_path = "~#{ssh_user}/.ssh" %>
         | 
         | mkdir -p <%= ssh_path %>
         | 
         | cat << EOF >> <%= ssh_path %>/authorized_keys
         | <%= @host.params['remote_execution_ssh_keys'].join("\n") %>
         | EOF
         | 
         | chmod 700 <%= ssh_path %>
         | chmod 600 <%= ssh_path %>/authorized_keys
         | chown -R <%= "#{ssh_user}:" %> <%= ssh_path %>
         | 
         | # Restore SELinux context with restorecon, if it's available:
         | command -v restorecon && restorecon -RvF <%= ssh_path %> || true
         | <% end %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | saltstack_minion
template | <%#
         | kind: snippet
         | name: saltstack_minion
         | %>
         | master: <%= @host.params['salt_master'] %>
         | log_level: warning
         | 
         | <%#
         | # Grains (http://docs.saltstack.com/en/latest/topics/targeting/grains.html#grains-in-the-minion-config)
         | #
         | # Possible parameters are:
         | #
         | # * {'cluster': 'alpha'}
         | # * {'roles': ['webserver', 'frontend']}
         | #
         | %>
         | grains: <%= @host.params['salt_grains'] ? @host.params['salt_grains'] : '{}' %>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | Satellite Kickstart Default
template | <%#
         | kind: provision
         | name: Satellite Kickstart default
         | oses:
         | - CentOS 5
         | - CentOS 6
         | - CentOS 7
         | - RedHat 5
         | - RedHat 6
         | - RedHat 7
         | - Fedora 19
         | - Fedora 20
         | %>
         | <%
         |   rhel_compatible = @host.operatingsystem.family == 'Redhat' && @host.operatingsystem.name != 'Fedora'
         |   os_major = @host.operatingsystem.major.to_i
         |   # safemode renderer does not support unary negation
         |   pm_set = @host.puppetmaster.empty? ? false : true
         |   puppet_enabled = pm_set || @host.params['force-puppet']
         |   salt_enabled = @host.params['salt_master'] ? true : false
         |   section_end = (rhel_compatible && os_major <= 5) ? '' : '%end'
         | %>
         | install
         | <%= @mediapath %>
         | lang en_US.UTF-8
         | selinux --enforcing
         | keyboard us
         | skipx
         | 
         | <% subnet = @host.subnet -%>
         | <% if subnet.respond_to?(:dhcp_boot_mode?) -%>
         | <% dhcp = subnet.dhcp_boot_mode? && !@static -%>
         | <% else -%>
         | <% dhcp = !@static -%>
         | <% end -%>
         | 
         | network --bootproto <%= dhcp ? 'dhcp' : "static --ip=#{@host.ip} --netmask=#{subnet.mask} --gateway=#{subnet.gateway} --nameserver=#{[subnet.dns_primary, subnet.dns_secondary].select(&:present?).join(',')}" %> --hostname <%= @host %><%= os_major >= 6 ? " --device=#{@host.mac}" : '' -%>
         | 
         | rootpw --iscrypted <%= root_pass %>
         | firewall --<%= os_major >= 6 ? 'service=' : '' %>ssh
         | authconfig --useshadow --passalgo=sha256 --kickstart
         | timezone --utc <%= @host.params['time-zone'] || 'UTC' %>
         | 
         | <% if @host.operatingsystem.name == 'Fedora' and os_major <= 16 -%>
         | # Bootloader exception for Fedora 16:
         | bootloader --append="nofb quiet splash=quiet <%=ks_console%>" <%= grub_pass %>
         | part biosboot --fstype=biosboot --size=1
         | <% else -%>
         | bootloader --location=mbr --append="nofb quiet splash=quiet" <%= grub_pass %>
         | <% end -%>
         | 
         | <% if os_major == 5 -%>
         | key --skip
         | <% end -%>
         | 
         | <% if @dynamic -%>
         | %include /tmp/diskpart.cfg
         | <% else -%>
         | <%= @host.diskLayout %>
         | <% end -%>
         | 
         | text
         | reboot
         | 
         | %packages --ignoremissing
         | yum
         | dhclient
         | ntp
         | wget
         | @Core
         | <%= section_end -%>
         | 
         | <% if @dynamic -%>
         | %pre
         | <%= @host.diskLayout %>
         | <%= section_end -%>
         | <% end -%>
         | 
         | %post --nochroot
         | exec < /dev/tty3 > /dev/tty3
         | #changing to VT 3 so that we can see whats going on....
         | /usr/bin/chvt 3
         | (
         | cp -va /etc/resolv.conf /mnt/sysimage/etc/resolv.conf
         | /usr/bin/chvt 1
         | ) 2>&1 | tee /mnt/sysimage/root/install.postnochroot.log
         | <%= section_end -%>
         | 
         | 
         | %post
         | logger "Starting anaconda <%= @host %> postinstall"
         | exec < /dev/tty3 > /dev/tty3
         | #changing to VT 3 so that we can see whats going on....
         | /usr/bin/chvt 3
         | (
         | <% if subnet.respond_to?(:dhcp_boot_mode?) -%>
         | <%= snippet 'kickstart_networking_setup' %>
         | <% end -%>
         | 
         | #update local time
         | echo "updating system time"
         | /usr/sbin/ntpdate -sub <%= @host.params['ntp-server'] || '0.fedora.pool.ntp.org' %>
         | /usr/sbin/hwclock --systohc
         | 
         | <%= snippet "subscription_manager_registration" %>
         | 
         | <% if @host.info['parameters']['realm'] && @host.realm && @host.realm.realm_type == 'Red Hat Identity Management' -%>
         | <%= snippet "idm_register" %>
         | <% end -%>
         | 
         | # update all the base packages from the updates repository
         | yum -t -y -e 0 update
         | 
         | <%= snippet('remote_execution_ssh_keys') %>
         | 
         | <% if salt_enabled %>
         | yum -t -y -e 0 install salt-minion
         | cat > /etc/salt/minion << EOF
         | <%= snippet 'saltstack_minion' %>
         | EOF
         | # Setup salt-minion to run on system reboot
         | /sbin/chkconfig --level 345 salt-minion on
         | # Running salt-call to trigger key signing
         | salt-call --no-color --grains >/dev/null
         | <% end -%>
         | 
         | <% if puppet_enabled %>
         | # and add the puppet package
         | yum -t -y -e 0 install puppet
         | 
         | echo "Configuring puppet"
         | cat > /etc/puppet/puppet.conf << EOF
         | <%= snippet 'puppet.conf' %>
         | EOF
         | 
         | # Setup puppet to run on system reboot
         | /sbin/chkconfig --level 345 puppet on
         | 
         | /usr/bin/puppet agent --config /etc/puppet/puppet.conf -o --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize
         | <% end -%>
         | 
         | sync
         | 
         | <% if @provisioning_type == nil || @provisioning_type == 'host' -%>
         | # Inform the build system that we are done.
         | echo "Informing Foreman that we are built"
         | wget -q -O /dev/null --no-check-certificate <%= foreman_url %>
         | <% end -%>
         | ) 2>&1 | tee /root/install.post.log
         | exit 0
         | 
         | <%= section_end -%>
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | idm_register
template | <%#
         | kind: snippet
         | name: idm_register
         | %>
         | # Identity Management Registration Snippet
         | #
         | # Optional parameters:
         | #
         | #   idm_server              IdM server
         | #
         | #   idm_sudo                Enable sudoers
         | #                           Default: true
         | #
         | #   idm_ssh                 Enable ssh integration
         | #                           Default: true
         | #
         | #   idm_automount           Enable automounter
         | #                           Default: false
         | #
         | #   idm_automount_location  Location for automounts
         | #
         | #   idm_mkhomedir           Enable automatically making home directories
         | #                           Default: true
         | #
         | #   idm_opts                Additional options to pass directly to installer
         | #
         | 
         | <% if @host.operatingsystem.family == 'Redhat' -%>
         |   <% if @host.operatingsystem.name == 'Fedora' -%>
         |     idm_client=freeipa-client
         |   <% else -%>
         |     idm_client=ipa-client
         |   <% end -%>
         |   <% if @host.operatingsystem.major.to_i > 6 -%>
         |     /usr/sbin/sshd-keygen
         |   <% end -%>
         | <% else -%>
         |   idm_client=freeipa-client
         | <% end -%>
         | 
         | <%= @host.operatingsystem.family == 'Redhat' ? 'yum install -y libsss_sudo' : 'apt-get install -y libsss-sudo' %> $idm_client
         | 
         | ##
         | ## IDM Client Installation
         | ##
         | <% if @host.params['idm_server'] -%>
         | <% domain = @host.params['idm_domain'] || @host.realm.name.downcase -%>
         | 
         | idm_server="--server <%= @host.params['idm_server'] %> --domain <%=domain %>"
         | <% end -%>
         | 
         | <% unless @host.param_false? 'idm_mkhomedir' %>
         | idm_mkhomedir="--mkhomedir"
         | <% end -%>
         | 
         | <% if @host.param_false? 'idm_ssh' %>
         | idm_ssh="--no-ssh"
         | <% end -%>
         | 
         | <% if @host.params['idm_opts'] -%>
         | idm_opts="<%= @host.params['idm_opts'] %>"
         | <% end -%>
         | 
         | # One-time password will be requested at install time. Otherwise, $HOST[OTP] is used as a placeholder value.
         | /usr/sbin/ipa-client-install -w '<%= @host.otp || "$HOST[OTP]" %>' --realm=<%= @host.realm %> -U $idm_mkhomedir $idm_opts $idm_server $idm_ssh
         | 
         | ##
         | ## Automounter
         | ##
         | 
         | <% if @host.params['idm_automount_location'] -%>
         | automount_location="--location <%= @host.params['idm_automount_location'] %>"
         | <% end -%>
         | 
         | <% if @host.param_true? 'idm_automount' -%>
         | if [ -f /usr/sbin/ipa-client-automount ]
         | then
         |   /usr/sbin/ipa-client-automount $idm_server $automount_location --unattended
         | fi
         | <% end -%>
         | 
         | ##
         | ## Sudoers
         | ##
         | 
         | <% unless @host.param_false? 'idm_enable_sudo' %>
         | 
         | idm_client_version=$(ipa-client-install --version)
         | idm_client_version_major=$(echo $idm_client_version | cut -f1 -d.)
         | idm_client_version_minor=$(echo $idm_client_version | cut -f2 -d.)
         | idm_realm=$(grep default_realm /etc/krb5.conf | cut -d"=" -f2 | tr -d ' ')
         | idm_domain=$(grep -A 2 domain_realm /etc/krb5.conf | tail -n1 | awk '{print $1}')
         | idm_dn=$(for word in $(echo $idm_domain | sed 's/\./ /g'); do echo -n dc=$word,; done)
         | sssd_version=$(sssd --version)
         | sssd_major=$(echo $sssd_version | cut -f1 -d.)
         | sssd_minor=$(echo $sssd_version | cut -f2 -d.)
         | LDAP_CONFIG=$(mktemp)
         | 
         | # >=ipa-client-4.1.0 automatically configures sssd for sudo
         | # =<ipa-client-3 requires manual configuration which this snippet takes care of
         | 
         | if [ $idm_client_version_major -lt 4 ]
         | then
         |   # Modify sssd.conf
         |   sed -i -e "s/services = .*/\0, sudo/" /etc/sssd/sssd.conf
         | 
         |   # Modify sssd.conf for sssd <1.11 (RHEL <6.6)
         |   if [ $sssd_minor -lt 11 ] || [ $sssd_major -lt 1 ]
         |   then
         |     <% if @host.params['idm_server'] -%>
         |     ldap_uri=", ldap://<%= @host.params['idm_server'] %>"
         |     krb5_server=<%= @host.params['idm_server'] %>
         |     <% else -%>
         |     krb5_server="_srv_"
         |     <% end -%>
         | 
         | cat <<EOF > $LDAP_CONFIG
         | sudo_provider = ldap
         | ldap_uri = _srv_ $ldap_uri
         | ldap_sudo_search_base = ou=SUDOers,${idm_dn%?}
         | ldap_sasl_mech = GSSAPI
         | ldap_sasl_authid = host/$HOSTNAME
         | ldap_sasl_realm = $idm_realm
         | krb5_server = $krb5_server
         | EOF
         |   sed -i -e "/\[domain\/.*\]/ r $LDAP_CONFIG" /etc/sssd/sssd.conf
         |   fi
         | 
         |   # Modify nsswitch.conf
         |   grep -q sudoers /etc/nsswitch.conf
         |   if [[ $? -eq 0 ]];
         |   then
         |     sed -i -e "s/^sudoers.*/sudoers:    files sss/" /etc/nsswitch.conf
         |   else
         |     echo "sudoers:    files sss" >> /etc/nsswitch.conf
         |   fi
         | 
         |   # Configure nisdomain
         |   <% if @host.operatingsystem.family == 'Redhat' -%>
         |     authconfig --nisdomain ${idm_domain} --update
         |     chkconfig sssd on
         | 
         |     if [[ $(rpm -qa systemd | wc -l) -gt 0 ]];
         |     then
         |       domain_service=/usr/lib/systemd/system/*-domainname.service
         | 
         |       # Workaround for BZ1071969 on RHEL 7.0
         |       grep -q "DefaultDependencies=no" $domain_service
         |       if [[ $? -ne 0 ]]
         |       then
         |         sed -i -e "s/\[Unit\]/\[Unit\]\nDefaultDependencies=no/" $domain_service
         |       fi
         | 
         |       systemctl start $(basename $domain_service)
         |       systemctl enable $(basename $domain_service)
         |     fi
         |   <% else -%>
         |   # OS is not RedHat
         |   sed -i -e '/^exit /d' /etc/rc.local
         |   echo "nisdomainname ${idm_domain}" >> /etc/rc.local
         |   echo "exit 0" >> /etc/rc.local
         |   nisdomainname ${idm_domain}
         |   <% end -%>
         | fi
         | 
         | <% end -%>
         | 
         | 
---------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
name     | subscription_manager_registration
template | <% if @host.params['kt_activation_keys'] %>
         |   # add subscription manager
         |  <% if @host.operatingsystem.name.match(/.*atomic.*/i) %>
         |   curl -s <%= subscription_manager_configuration_url(@host, false) %> | IS_ATOMIC=true bash
         |  <% else %>
         |   yum -t -y -e 0 install subscription-manager
         |   rpm -ivh <%= subscription_manager_configuration_url(@host) %>
         |  <% end %>
         | 
         |   echo "Registering the System"
         |   subscription-manager register --org="<%= @host.rhsm_organization_label %>" --name="<%= @host.name %>" --activationkey="<%= @host.params['kt_activation_keys'] %>"
         | 
         |   <% if @host.operatingsystem.name == "RedHat" %>
         |     echo "Enabling Satellite Tools Repo"
         |     echo "DEPRECATED: This may be removed in a future version of Satellite, please add Satellite Tools to your activation key(s)."
         |     subscription-manager repos --enable='rhel-*-satellite-tools-*-rpms'
         |   <% end %>
         | 
         |   <% unless @host.operatingsystem.name.match(/.*atomic.*/i) %>
         |     echo "Installing Katello Agent"
         |     yum -t -y -e 0 install katello-agent
         |     chkconfig goferd on
         |   <% end %>
         | <% end %>
         | 

